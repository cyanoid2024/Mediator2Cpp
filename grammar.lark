


start: (typedef | automaton | system)*

typedef: "typedef" struct_def "as" ID ";"
        | "typedef" enum_def "as" ID ";"

struct_def: "struct" "{" field ("," field)* "}"
enum_def: "enum" "{" ID ("," ID)* "}"
field: ID ":" type


automaton: "automaton" template ID ports "{" variables transitions "}"
template: "<" (template_param ("," template_param)*)? ">"
template_param: ID ":" type

ports: "(" port ("," port)* ")"
port: ID ":" (DIRECTION) type
DIRECTION: "in"|"out"

variables: "variables" "{" ((var_decl)+)? "}"
var_decl: ID ":" type ("init" expr)? ";"

transitions: "transitions" "{" transition+ "}"
transition: (condition "->" action_block) | group
group: "group" "{" transition+ "}"
condition: expr
action_block: "{" (action_stmt )* "}"
action_stmt: (assign_stmt | sync_stmt | perform_stmt | expr_stmt) ";"
assign_stmt: lhs ":=" expr
sync_stmt: "sync" ID+
perform_stmt: "perform" ID+
expr_stmt: expr

system: "system" ID "(" ")" "{" components connections "}"
components: "components" "{" component_decl+ "}"
component_decl: ID+ ":" component_type ";"
component_type: ID template_args
template_args: "<" (primary_expr ("," primary_expr)*)? ">"

connections: "connections" "{" connection+ "}"
connection: ID template_args "(" lhs ("," lhs)* ")" ";"
        | ID "->" ID ";"

type: primitive_type
    | composite_type
    | "(" type ")"
    | ID

composite_type: map_type
                | union_type
                | initialized_type

map_type: "map" "[" type "]" type
union_type: type "|" type
initialized_type: type "init" expr




primitive_type: INT_TYPE range?
                | REAL_TYPE
                | BOOL_TYPE
                | CHAR_TYPE
range: (expr) ".." (expr)

INT_TYPE: "int"
REAL_TYPE: "real"
BOOL_TYPE: "bool"
CHAR_TYPE: "char"

expr: compare_expr
    | expr (AND | OR) compare_expr
    | compare_expr (AND | OR) expr
    | NOT compare_expr

AND: "&&"
OR: "||"
NOT: "!"

compare_expr: addi_expr
            | compare_expr (EQUAL | NOTEQUAL | LESS | GREATER | LEQ | GEQ) addi_expr
            | addi_expr (EQUAL | NOTEQUAL | LESS | GREATER | LEQ | GEQ) compare_expr

EQUAL: "=="
NOTEQUAL: "!="
LESS: "<"
GREATER: ">"
LEQ: "<="
GEQ: ">="

addi_expr: multi_expr
                | addi_expr (ADD | MINUS) multi_expr
                | multi_expr (ADD | MINUS) addi_expr

ADD: "+"
MINUS: "-"

multi_expr: primary_expr
                    | multi_expr (TIMES | DIVIDE | MOD) primary_expr
                    | primary_expr (TIMES | DIVIDE | MOD) multi_expr

TIMES: "*"
DIVIDE: "/"
MOD: "%"

primary_expr: value
            | lhs
            | struct_literal
            | "(" prec_expr ")"
            | function_call

prec_expr: expr            

struct_literal: field_type "{" field_init ("," field_init)* "}"
field_type: ID
field_init: ID ":" expr
function_call: ID "(" (expr ("," expr)*)? ")"

value: NUMBER
        | STRING
        | TRUE
        | FALSE
        | NULL
TRUE: "true"
FALSE: "false"
NULL: "NULL"

lhs: ID | lhs "." ID

STRING: /"([^"\\]|\\.)*"/
ID: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /-?\d+/

%import common.WS
%ignore WS
%ignore /\/\*(.|\n)*?\*\//
%ignore /\/\/.*/
